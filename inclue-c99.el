;;; inclue-c99.el --- Descriptions of C99 headers for inclue.el
;; Copyright (c) 2010 Thomas Munro munro@ip9.org

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;; Commentary:
;; 
;; The header meta-data for C99.  Known problems:
;;
;; - some macros and types are defined by more than one header; inclue
;;   doesn't really understand that so I have arbitrarily picked what
;;   seemed like the most sensible one (eg NULL)
;;
;; - there are probably typos, my attempt to extract the text from the
;;   standard documement didn't go so well so it was manually typed!
;;
;; - the header <tgmath.h> is not covered

;;; History:
;;
;; - 2010-06-26 -- First cut by Thomas Munro

(require 'inclue)

;;; Code:

(define-inclue-library (c99 angle-brackets)
  "The C standard headers, from ISO/IEC 9899:1999.")

(define-inclue-header (c99 "assert.h")
  "7.2. Diagnostics."
  (assert "void assert(scalar expression)"))

(define-inclue-header (c99 "complex.h")
  "7.3. Complex arithmetic."
  (complex)
  (imaginary)
  (I)
  (CX_LIMITED_RANGE)
  (cacos "double complex cacos(double complex z)")
  (cacosf "float complex cacosf(float complex z)")
  (cacosl "long double complex cacosl(long double complex z)")
  (casin "double complex casin(double complex z)")
  (casinf "float complex casinf(float complex z)")
  (casinl "long double complex casinl(long double complex z)")
  (catan "double complex catan(double complex z)")
  (catanf "float complex catanf(float complex z)")
  (catanl "long double complex catanl(long double complex z)")
  (ccos "double complex ccos(double complex z)")
  (ccosf "float complex ccosf(float complex z)")
  (ccosl "long double complex ccosl(long double complex z)")
  (csin "double complex csin(double complex z)")
  (csinf "float complex csinf(float complex z)")
  (csinl "long double complex csinl(long double complex z)")
  (ctan "double complex ctan(double complex z)")
  (ctanf "float complex ctanf(float complex z)")
  (ctanl "long double complex ctanl(long double complex z)")
  (cacosh "double complex cacosh(double complex z)")
  (cacoshf "float complex cacoshf(float complex z)")
  (cacoshl "long double complex cacoshl(long double complex z)")
  (casinh "double complex casinh(double complex z)")
  (casinhf "float complex casinhf(float complex z)")
  (casinhl "long double complex casinhl(long double complex z)")
  (catanh "double complex catanh(double complex z)")
  (catanhf "float complex catanhf(float complex z)")
  (catanhl "long double complex catanhl(long double complex z)")
  (ccosh "double complex ccosh(double complex z)")
  (ccoshf "float complex ccoshf(float complex z)")
  (ccoshl "long double complex ccoshl(long double complex z)")
  (csinh "double complex csinh(double complex z)")
  (csinhf "float complex csinhf(float complex z)")
  (csinhl "long double complex csinhl(long double complex z)")
  (ctanh "double complex ctanh(double complex z)")
  (ctanhf "float complex ctanhf(float complex z)")
  (ctanhl "long double complex ctanhl(long double complex z)")
  (cexp "double complex cexp(double complex z)")
  (cexpf "float complex cexpf(float complex z)")
  (cexpl "long double complex cexpl(long double complex z)")
  (clog "double complex clog(double complex z)")
  (clogf "float complex clogf(float complex z)")
  (clogl "long double complex clogl(long double complex z)")
  (cabs "double cabs(double complex z)")
  (cabsf "float cabsf(float complex z)")
  (cabsl "long double cabsl(long double complex z)")
  (cpow "double complex cpow(double complex x, double complex y)")
  (cpowf "float complex cpowf(float complex x, float complex y)")
  (cpowl "long double complex cpowl(long double complex x, long double complex y)")
  (csqrt "double complex csqrt(double complex z)")
  (csqrtf "float complex csqrtf(float complex z)")
  (csqrtl "long double complex csqrtl(long double complex z)")
  (carg "double carg(double complex z)")
  (cargf "float cargf(float complex z)")
  (cargl "long double cargl(long double complex z)")
  (cimag "double cimag(double complex z)")
  (cimagf "float cimagf(float complex z)")
  (cimagl "long double cimagl(long double complex z)")
  (cconj "double complex cconj(double complex z)")
  (cconjf "float complex cconjf(float complex z)")
  (cconjl "long double complex cconjl(long double complex z)")
  (cproj "double complex cproj(double complex z)")
  (cprojf "float complex cprojf(float complex z)")
  (cprojl "long double complex cprojl(long double complex z)")
  (creal "double creal(double complex z)")
  (crealf "float crealf(float complex z)")
  (creall "long double creall(long double complex z)"))

(define-inclue-header (c99 "ctype.h")
  "7.4. Character handling."
  (isalnum "int isalnum(int c)")
  (isalpha "int isalpha(int c)")
  (isblank "int inblank(int c)")
  (iscntrl "int iscntrl(int c)")
  (isdigit "int isdigit(int c)")
  (isgraph "int isgraph(int c)")
  (islower "int islower(int c)")
  (isprint "int isprint(int c)")
  (ispunct "int ispunct(int c)")
  (isspace "int isspace(int c)")
  (isupper "int isupper(int c)")
  (isxdigit "int isxdigit(int c)")
  (tolower "int tolower(int c)")
  (toupper "int toupper(int c)"))

(define-inclue-header (c99 "errno.h")
  "7.5. Errors."
  (EDOM)
  (EILSEQ)
  (ERANGE)
  (errno))

(define-inclue-header (c99 "fenv.h")
  "7.6. Floating-point environment."
  (fenv_t)
  (fexcept_t)
  (FE_DIVBYZERO)
  (FE_INEXACT)
  (FE_INVALID)
  (FE_OVERFLOW)
  (FE_UNDERFLOW)
  (FE_ALL_EXCEPT)
  (FE_DOWNWARD)
  (FE_TONEAREST)
  (FE_TOWARDZERO)
  (FE_UPWARD)
  (FE_DFL_ENV)
  (FENV_ACCESS)
  (feclearexcept "void feclearexcept(int excepts)")
  (fegetexceptflag "void fegetexceptflag(fexcept_t *flagp, int excepts)")
  (feraiseexcept "void feraiseexcept(int excepts)")
  (fesetexceptflag "void fesetexceptflag(const fexcept_t *flagp, int excepts)")
  (fetestexcept "int fetestexcept(int excepts)")
  (fegetround "int fegetround(void)")
  (fesetround "int fesetround(int rount)")
  (fegetenv "void fegetenv(fenv_t *envp)")
  (feholdexcept "int feholdexcept(fenv_t *envp)")
  (fesetenv "void fesetenv(const fenv_t *envp)")
  (feupdateenv "void feupdateenv(const fenv_t *envp)"))

(define-inclue-header (c99 "float.h")
  "7.7. Characteristics of floating types."
  (FLT_RADIX)
  (FLT_MANT_DIG)
  (DBL_MANT_DIG)
  (LDBL_MANT_DIG)
  (FLT_MIN_EXP)
  (DBL_MIN_EXP)
  (LDBL_MIN_EXP)
  (FLT_MIN_10_EXP)
  (DBL_MIN_10_EXP)
  (LDBL_MIN_10_EXP)
  (FLT_MAX_EXP)
  (DBL_MAX_EXP)
  (LDBL_MAX_EXP)
  (FTL_MAX_10_EXP)
  (DBL_MAX_10_EXP)
  (LDBL_MAX_10_EXP)
  (FLT_MAX)
  (DBL_MAX)
  (LDBL_MAX)
  (FLT_EPSILON)
  (DBL_EPSILON)
  (LDBL_EPSILON)
  (FLT_MIN)
  (DBL_MIN)
  (LDBL_MIN)
  (FLT_EVAL_METHOD)
  (FLT_ROUNDS))

(define-inclue-header (c99 "inttypes.h")
  "7.8. Format conversion of integer types."
  (imaxdiv_t)
  (PRId8)
  (PRId16)
  (PRId32)
  (PRId64)
  (PRIi8)
  (PRIi16)
  (PRIi32)
  (PRIi64)
  (PRIdLEAST8)
  (PRIdLEAST16)
  (PRIdLEAST32)
  (PRIdLEAST64)
  (PRIiLEAST8)
  (PRIiLEAST16)
  (PRIiLEAST32)
  (PRIiLEAST64)
  (PRIdFAST8)
  (PRIdFAST16)
  (PRIdFAST32)
  (PRIdFAST64)
  (PRIiFAST8)
  (PRIiFAST16)
  (PRIiFAST32)
  (PRIiFAST64)
  (PRIdMAX)
  (PRIiMAX)
  (PRIdPTR)
  (PRIiPTR)
  ;; TODO PRI... loads more permutations!
  (imaxabs "intmax_t imaxabs(intmax_t j)")
  (imaxdiv "intmax_t imaxdiv(intmax_t numner, intmax_t denom)")
  (strtoimax "intmax_t strtoimax(const char * restrict nptr, char ** restrict endptr, int base)")
  (strtoumax "uintmax_t strtoumax(const char * restrict nptr, char ** restrict endptr, int base)")
  (wcstoimax "intmax_t wcstoimax(const wchar_t * restrict nptr, wchar+t ** retrict endptr, int base)")
  (wcstoumax "uintmax_t wcstoumax(const wchar_t * restrict nptr, wchar+t ** restrict endptr, int base)"))

(define-inclue-header (c99 "iso646.h")
  "7.9 Alernative spellings for operators."
  (and)
  (and_eq)
  (bitand)
  (bitor)
  (compl)
  (not)
  (not_eq)
  (or)
  (or_eq)
  (xor)
  (xor_eq))

(define-inclue-header (c99 "limits.h")
  "7.10.  Size of integer types."
  (CHAR_BIT)
  (SCHAR_MIN)
  (SCHAR_MAX)
  (UCHAR_MAX)
  (CHAR_MIN)
  (CHAR_MAX)
  (MB_LEN_MAX)
  (SHRT_MIN)
  (SHRT_MAX)
  (INT_MIN)
  (INT_MAX)
  (UINT_MAX)
  (LONG_MIN)
  (LONG_MAX)
  (ULONG_MAX)
  (LLONG_MIN)
  (LLONG_MAX)
  (ULLONG_MAX))

(define-inclue-header (c99 "locale.h")
  "7.11. Localization."
  (lconv)
  (LC_ALL)
  (LC_COLLATE)
  (LC_CTYPE)
  (LC_MONETARY)
  (LC_NUMERIC)
  (LC_TIME)
  (setlocale "char *setlocale(int category, const char *locale)")
  (localeconv "struct lconv *localeconv(void)"))

(define-inclue-header (c99 "math.h")
  "7.12. Mathematics."
  (float_t)
  (double_t)
  (HUGE_VAL)
  (HUGE_VALF)
  (HUFE_VALL)
  (INFINITY)
  (NAN)
  (FP_INFINITE)
  (FP_NAN)
  (FP_NORMAL)
  (FP_SUBNORMAL)
  (FP_ZERO)
  (FP_FAST_FMA)
  (FP_FAST_FMAF)
  (FP_FAST_FMAL)
  (FP_ILOGB0)
  (FP_ILOGBNAN)
  (MATH_ERRNO)
  (MATH_ERREXCEPT)
  (math_errhandling)
  (FP_CONTRACT)
  (fpclassify "int fpclassify(float x)
int fpclassify(double x)
int fpclassify(long double x)")
  (isfinite "int isfinite(float x)
int isfinite(double x)
int isfinite(long double x)")
  (isinf "int isinf(float x)
int isinf(double x)
int isinf(long double x)")
  (isnan "int isnan(float x)
int isnan(double x)
int isnan(long double)")
  (isnormal "int isnormal(float x)
int isnormal(double x)
int isnormal(long double x)")
  (signbit "int signbit(float x)
int signbit(double x)
int signbit(long double x)")
  (acos "double acos(double x)")
  (acosf "float acosf(float x)")
  (acosl "long double acosl(long double x)")
  (asin "double asin(double x)")
  (asinf "float asin(float x)")
  (asinl "long double asinl(long double x)")
  (atan "double atan(double x)")
  (atanf "float atanf(float x)")
  (atanl "long double atanl(long double x)")
  (atan2 "double atan2(double x)")
  (atan2f "float atan2f(float x)")
  (atan2l "long double atan2l(long double x)")
  (cos "double cos(double x)")
  (cosf "float cosf(float x)")
  (cosl "long double cosl(long double x)")
  (tan "double tan(double x)")
  (tanf "float tanf(float x)")
  (tanl "long double tanl(long double x)")
  (acosh "double acosh(double x)")
  (acoshf "float acoshf(float x)")
  (acoshl "long double acoshl(long double x)")
  (asinh "double asinh(double x)")
  (asinhf "float asinhf(float x)")
  (asinhl "long double asinhl(long double x)")
  (atanh "double atanh(double x)")
  (atanhf "float atanhf(float x)")
  (atanhl "long double atanhl(long double x)")
  (cosh "double cosh(double x)")
  (coshf "float coshf(float x)")
  (coshl "long double coshl(long double x)")
  (sinh "double sinh(double x)")
  (sinhf "float sinhf(float x)")
  (sinhl "long double sinhl(long double x)")
  (tanh "double tanh(double x)")
  (tanhf "float tanhf(float x)")
  (tanhl "long double tanhl(long double x)")
  (exp "double exp(double x)")
  (expf "float expf(float x)")
  (expl "long double expl(long double x)")
  (exp2 "double exp2(double x)")
  (exp2f "float exp2f(float x)")
  (exp2l "long double exp2l(long double x)")
  (expm1 "double expm1(double x)")
  (expm1f "float expm1f(float x)")
  (expm1l "long double expm1l(long double x)")
  (frexp "double frexp(double x)")
  (frexpf "float frexpf(float x)")
  (frexpl "long double frexpl(long double x)")
  (ilogb "double ilogb(double x)")
  (ilogbf "float ilogbf(float x)")
  (ilogbl "long double ilogbl(long double x)")
  (ldexp "double ldexp(double x)")
  (ldexpf "float ldexpf(float x)")
  (ldexpl "long double ldexpl(long double x)")
  (log "double log(double x)")
  (logf "float logf(float x)")
  (logl "long double logl(long double x)")
  (log10 "double log10(double x)")
  (log10f "float log10f(float x)")
  (log10l "long double log10l(long double x)")
  (log1p "double log1p(double x)")
  (log1pf "float log1pf(float x)")
  (log1pl "long double log1pl(long double x)")
  (log2 "double log2(double x)")
  (log2f "float log2f(float x)")
  (log2l "long double log2l(long double x)")
  (logb "double logb(double x)")
  (logbf "float logbf(float x)")
  (logbl "long double logbl(long double x)")
  (modf "double modf(double x)")
  (modff "float modff(float x)")
  (modfl "long double modfl(long double x)")
  (scalbn "double scalbn(double x, int n)")
  (scalbnf "float scalbnf(float x, int n)")
  (scalbnl "long double scalbnl(long double x, int n)")
  (scalbln "double scalbln(double x, int n)")
  (scalblnf "float scalblnf(float x, int n)")
  (scalblnl "long double scalblnl(long double x, int n)")
  (cbrt "double cbrt(double x)")
  (cbrtf "float cbrtf(float x)")
  (cbrtl "long double cbrtl(long double x)")
  (fabs "double fabs(double x)")
  (fabsf "float fabsf(float x)")
  (fabsl "long double fabsl(long double x)")
  (hypot "double hypot(double x)")
  (hypotf "float hypotf(float x)")
  (hypotl "long double hypotl(long double x)")
  (pow "double pow(double x, double y)")
  (powf "float powf(float x, float y)")
  (powl "long double powl(long double x, long double y)")
  (sqrt "double sqrt(double x)")
  (sqrtf "float sqrtf(float x)")
  (sqrtl "long double sqrtl(long double x)")
  (erf "double erf(double x)")
  (erff "float erff(float x)")
  (erfl "long double erfl(long double x)")
  (erfc "double erfc(double x)")
  (erfcf "float erfcf(float x)")
  (erfcl "long double erfcl(long double x)")
  (lgamma "double lgamma(double x)")
  (lgammaf "float lgammaf(float x)")
  (lgammal "long double lgammal(long double x)")
  (tgamma "double tgamma(double x)")
  (tgammaf "float tgammaf(float x)")
  (tgammal "long double tgammal(long double x)")
  (ceil "double ceil(double x)")
  (ceilf "float ceilf(float x)")
  (ceill "long double ceill(long double x)")
  (floor "double floor(double x)")
  (floorf "float floorf(float x)")
  (floorl "long double floorl(long double x)")
  (nearbyint "double nearbyint(double x)")
  (nearbyintf "float nearbyintf(float x)")
  (nearbyintl "long double nearbyintl(long double x)")
  (rint "double rint(double x)")
  (rintf "float rintf(float x)")
  (rintl "long double rintl(long double x)")
  (lrint "long int lrint(double x)")
  (lrintf "long int lrintf(float x)")
  (lrintl "long int lrintl(long double x)")
  (llrint "long long int llrint(double x)")
  (llrintf "long long int llrintf(float x)")
  (llrintl "long long int llrintl(long double x)")
  (round "double round(double x)")
  (roundf "float roundf(float x)")
  (roundl "long double roundl(long double x)")
  (lround "long int lround(double x)")
  (lroundf "long int lroundf(float x)")
  (lroundl "long int lroundl(long double x)")
  (llround "long long int llround(double x)")
  (llroundf "long long int llroundf(float x)")
  (llroundl "long long int llroundl(long double x)")
  (trunc "double trunc(double x)")
  (truncf "float truncf(float x)")
  (truncl "long double truncl(long double x)")
  (fmod "double fmod(double x)")
  (fmodf "float fmodf(float x)")
  (fmodl "long double fmodl(long double x)")
  (remainder "double remainder(double x)")
  (remainderf "float remainderf(float x)")
  (remainderl "long double remainderl(long double x)")
  (remquo "double remquo(double x)")
  (remquof "float remquof(float x)")
  (remquol "long double remquol(long double x)")
  (copysign "double copysign(double x, double y)")
  (copysignf "float copysignf(float x, float y)")
  (copysignl "long double copysignl(long double x, long double y)")
  (nan "double nan(const char *tagp)")
  (nanf "float nanf(const char *tagp)")
  (nanl "long double nanl(const char *tagp)")
  (nextafter "double nextafter(double x, double y)")
  (nextafterf "float nextafterf(float x, float y)")
  (nextafterl "long double nextafterl(long double x, long double y)")
  (nexttoward "double nexttoward(double x, double y)")
  (nexttowardf "float nexttowardf(float x, float y)")
  (nexttowardl "long double nexttowardl(long double x, long double y)")
  (fdim "double fdim(double x, double y)")
  (fdimf "float fdimf(float x, float y)")
  (fdiml "long double fdiml(long double x, long double y)")
  (fmax "double fmax(double x, double y)")
  (fmaxf "float fmaxf(float x, float y)")
  (fmaxl "long double fmaxl(long double x, long double y)")
  (fmin "double fmin(double x, double y)")
  (fminf "float fminf(float x, float y)")
  (fminl "long double fminl(long double x, long double y)")
  (fma "double fma(double x, double y, double z)")
  (fmaf "float fmaf(float x, float y, float z)")
  (fmal "long double fmal(long double x, long double y, long double z)")
  (isgreater "int isgreater(double x, double y)
int isgreater(float x, double x)
int isgreater(long double x, long double y)")
  (isgreaterequal "int isgreaterequal(double x, double y)
int isgreaterequal(float x, double x)
int isgreaterequal(long double x, long double y)")
  (isless "int isless(double x, double y)
int isless(float x, double x)
int isless(long double x, long double y)")
  (islessequal "int islessequal(double x, double y)
int islessequal(float x, double x)
int islessequal(long double x, long double y)")
  (islessgreater "int islessgreater(double x, double y)
int islessgreater(float x, double x)
int islessgreater(long double x, long double y)")
  (isunordered "int isunordered(double x, double y)
int isunordered(float x, double x)
int isunordered(long double x, long double y)"))

(define-inclue-header (c99 "setjmp.h")
  "7.13. Nonlocal jumps."
  (jmp_buf)
  (setjmp "int setjmp(jmp_buf env)")
  (longjmp "void longjmp(jmp_buf env, int val)"))

(define-inclue-header (c99 "signal.h")
  "7.14. Signal handling."
  (sig_atomic_t)
  (SIG_DFL)
  (SIG_ERR)
  (SIG_IGN)
  (SIGABRT)
  (SIGFPE)
  (SIGILL)
  (SIGINT)
  (SIGSEGV)
  (SIGTERM)
  (raise "int raise(int sig)")
  (signal "void *signal(int sig, void (*func)(int))"))

(define-inclue-header (c99 "stdarg.h")
  "7.15. The va_start macro."
  (va_list)
  (va_arg "<type> va_arg(va_list ap, <type>)")
  (va_copy "void va_copy(va_list dest, va_list srv)")
  (va_end "void va_end(va_list ap)")
  (va_start "void va_start(va_list ap, parmN)"))

(define-inclue-header (c99 "stdbool.h")
  "7.16. Boolean type and values."
  (bool)
  (true)
  (false))

(define-inclue-header (c99 "stddef.h")
  "7.17. Common definitions."
  (ptrdiff_t)
  (size_t)
  (wchar_t)
  (NULL)
  (offsetof "offsetof(type, <member-designator>)"))

(define-inclue-header (c99 "stdint.h")
  "7.18. Integer types."
  (int8_t)
  (int16_t)
  (int32_t)
  (int64_t)
  (uint8_t)
  (uint16_t)
  (uint32_t)
  (uint64_t)
  (int_least8_t)
  (int_least16_t)
  (int_least32_t)
  (int_least64_t)
  (uint_least8_t)
  (uint_least16_t)
  (uint_least32_t)
  (uint_least64_t)
  (int_fast8_t)
  (int_fast16_t)
  (int_fast32_t)
  (int_fast64_t)
  (uint_fast8_t)
  (uint_fast16_t)
  (uint_fast32_t)
  (uint_fast64_t)
  (intptr_t)
  (uintptr_t)
  (intmax_t)
  (INT8_MIN)
  (INT8_MAX)
  (UINT8_MAX)
  (INT16_MIN)
  (INT16_MAX)
  (UINT16_MAX)
  (INT32_MIN)
  (INT32_MAX)
  (UINT32_MAX)
  (INT64_MIN)
  (INT64_MAX)
  (UINT64_MAX)
  (INT_LEAST8_MIN)
  (INT_LEAST8_MAX)
  (UINT_LEAST8_MAX)
  (INT_LEAST16_MIN)
  (INT_LEAST16_MAX)
  (UINT_LEAST16_MAX)
  (INT_LEAST32_MIN)
  (INT_LEAST32_MAX)
  (UINT_LEAST32_MAX)
  (INT_LEAST64_MIN)
  (INT_LEAST64_MAX)
  (UINT_LEAST64_MAX)
  (INTPTR_MIN)
  (INTPTR_MAX)
  (UINTPTR_MIN)
  (UINTPTR_MAX)
  (INTMAX_MIN)
  (INTMAX_MAX)
  (UINTMAX_MIN)
  (UINTMAX_MAX)
  (PTRDIFF_MIN)
  (PTRDIFF_MAX)
  (SIG_ATOMIC_MIN)
  (SIG_ATOMIC_MAX)
  (WCHAR_MIN)
  (WCHAR_MAX)
  (WINT_MIN)
  (WINT_MAX)
  (INT8_C "INT8_C(value)")
  (UINT8_C "UINT8_C(value)")
  (INT16_C "INT16_C(value)")
  (UINT16_C "UINT16_C(value)")
  (INT32_C "INT32_C(value)")
  (UINT32_C "UINT32_C(value)")
  (INT64_C "INT64_C(value)")
  (UINT64_C "UINT64_C(value)")
  (INTMAX_C "INTMAX_C(value)")
  (UINTMAX_X "UINTMAX_C(value)"))

(define-inclue-header (c99 "stdio.h")
  "7.19. Input/output."
  ;; (size_t)
  (FILE)
  (fpos_t)
  ;; (NULL)
  (_IOFBF)
  (_IOLBF)
  (_IONBF)
  (BUFSIZ)
  (EOF)
  (FOPEN_MAX)
  (FILENAME_MAX)
  (L_tmpnam)
  (SEEK_CUR)
  (SEEK_END)
  (SEEK_SET)
  (TMP_MAX)
  (stderr)
  (stdin)
  (stdout)
  (remove "int remove(const char *filename)")
  (rename "int rename(const char *old, const char *new)")
  (tmpfile "FILE *tmpfile(void)")
  (tmpnam "char *tmpnam(char *s)")
  (fclose "int fclose(FILE *stream)")
  (fflush "int fflush(FILE *stream)")
  (fopen "FILE *fopen(const char * restrict filename, const char * restrict mode)")
  (freopen "FILE *freopen(const char * restrict filename, const char * restrict mode, FILE * restrict stream)")
  (setbuf "void setbuf(FILE * restrict stream, char * restrict buf)")
  (setvbuf "int setvbuf(FILE * restrict stream, char * restrict buf, int mode, size_t size)")
  (fprintf "int fprintf(FILE * restrict stream, const char * restrict format, ...)")
  (fscanf "int fscanf(FILE * restrict stream, const char * restrict format, ...)")
  (printf "int printf(const char * restrict format, ...)")
  (scanf "int scanf(const char * restrict format, ...)")
  (sprintf "int sprintf(char * restrict s, const char * restrict format, ...)")
  (sscanff "int sscanf(const char * restrict s, const char * restrict format, ...)")
  (vfprintf "int vfprintf(FILE * restrict stream, const char * restrict format, va_list arg)")
  (vfscanf "int vfscanf(FILE * restrict stream, const char * restrict format, va_list arg)")
  (vprintf "int vprintf(const char * restrict format, va_list arg)")
  (vscanf "int vscanf(const char * restrict format, va_list arg)")
  (vsnprintf "int vsnprintf(char * restrict s, size_t n, const char * restrict format, va_list arg)")
  (vsprintf "int vsprintf(char * restrict s, const char * restrict format, va_list arg)")
  (vsscanf "int vsscanf(const char * restrict s, const char * restrict format, va_list arg)")
  (fgetc "int fgetc(FILE *stream)")
  (fgets "char *fgets(char * restrict s, int n, FILE * restrict stream)")
  (fputc "int fputc(int c, FILE *stream)")
  (fputs "int fputs(const char * restrict s, FILE * restrict stream)")
  (getc "int getc(FILE *stream)")
  (getchar "int getchar(void)")
  (gets "char *gets(char *s)")
  (putc "int putc(int c, FILE *stream)")
  (putchar "int putchar(int c)")
  (puts "int puts(const char *s)")
  (ungetc "int ungetc(int c, FILE *stream)")
  (fread "size_t fread(void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream)")
  (fwrite "size_t fwrite(const void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream)")
  (fgetpos "int fgetpos(FILE * restrict stream, fpos_t * restrict pos)")
  (fseek "int fseek(FILE *stream, long in offset, int whence)")
  (fsetpos "int fsetpos(FILE *stream, const fpos_t *pos)")
  (ftell "long int ftell(FILE *stream)")
  (rewind "void rewind(FILE *stream)")
  (clearerr "void clearerr(FILE *stream)")
  (feof "int feof(FILE *stream)")
  (ferror "int ferror(FILE *stream)")
  (perror "void perror(const char *s)"))
  
(define-inclue-header (c99 "stdlib.h")
  "7.20. General utilities."
  (div_t)
  (ldiv_t)
  (lldiv_t)
  (EXIT_FAILURE)
  (EXIT_SUCCESS)
  ;; (NULL)
  (RAND_MAX)
  (MB_CUR_MAX)
  (atof "double atof(const char *nptr)")
  (strtod "int atoi(const char *nptr)")
  (atol "long int atol(const char *nptr)")
  (atoll "long long int atoll(const char *nptr)")
  (strtod "double strtod(const char * restrict nptr, char ** restrict endptr)")
  (strtof "float strtof(const char * restrict nptr, char ** restrict endptr)")
  (stdtold "long double stdtold(const char * restrict nptr, char ** restrict endptr)")
  (strtol "long int strtol(const char * restrict nptr, char ** restrict endptr, int base)")
  (strtoll "long long int strtoll(const char * restrict nptr, char ** restrict endptr, int base)")
  (strtoul "usigned long int strtoul(const char * restrict nptr, char ** restrict endptr, int base)")
  (strtoull "unsigned long long int strtoull(const char * restrict nptr, char ** restrict endptr, int base)")
  (rand "int rand(void)")
  (srand "void srand(unsigned int seed)")
  (calloc "void *calloc(size_t nmemb, size_t size)")
  (free "void free(void *ptr)")
  (malloc "void *malloc(size_t size)")
  (realloc "void *realloc(void *ptr, size_t size)")
  (abort "void abort(void)")
  (atexit "int atexit(void (*func)(void))")
  (exit "void exit(int status)")
  (_Exit "void _Exit(int status)")
  (getenv "const *getenv(const char *name)")
  (system "int system(const char *string)")
  (bsearch "void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))")
  (qsort "void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))")
  (abs "int abs(int j)")
  (labs "long int labs(long int j)")
  (llabs "long long int llabs(long long int j)")
  (div "div_t div(int numer, int denom)")
  (ldiv "ldiv_t ldiv(lont int numer, long int denom)")
  (lldiv "lldiv_t lldiv(long long int number, long long int denom)")
  (mblen "int mblen(const char *s, size_t n)")
  (mbtowc "int mbtowc(wchar_t * restrict pwc, const char * restrict s, size_t n)")
  (wctomb "int wctomb(char *s, wchar_t wc)")
  (mbstowcs "size_t mbstowcs(wchar_t * restrict pwcs, const char * restrict s, size_t n)")
  (wcstombs "size_t wcstombs(char * restrict s, const wchar_t * restrict pwcs, size_t n)"))

(define-inclue-header (c99 "string.h")
  "7.21. String handling."
  (memcpy "void *memcpy(void * restrict s1, const void * restrict s2, size_t n)")
  (memmove "void * memmove(void *s1, const void *s2, size_t n)")
  (strcpy "char *strcpy(char * restrict s1, const char * restrict s2)")
  (strncpy "char *strncpy(char * restrict s1, const char * restrict s2, size_t n)")
  (strcat "char *strcat(char * restrict s1, const char * restrict s2")
  (strncat "char *strncat(char * restrict s1, const char * restrict s2, size_t n)")
  (memcmp "int memcmp(const void *s1, const void *s2, size_t n)")
  (strcmp "int strcmp(const char *s1, const char *s2)")
  (strcoll "int strcoll(const char *s1, const char *s2)")
  (strncmp "int strncmp(const char *s1, const char *s2, size_t n)")
  (strxfrm "size_t strxfrm(char * restrict s1, const char * restrict s2, size_t n)")
  (memchr "void *memchr(const void *s, int c, size_t n)")
  (strchr "char *strchr(const char *s, int c)")
  (strcspn "size_t strcspn(const char *s1, const char *s2)")
  (strpbrk "char * strpbrk(const char *s1, const char *s2)")
  (strrchr "char *strrchr(const char *s, int c)")
  (strspn "size_t strspn(const char *s1, const char *s2)")
  (strstr "char *strstr(const char *s1, const char *s2)")
  (strtok "char *strtok(char * restrict s1, const char * restrict s2)")
  (memset "void *memset(void *s, int c, size_t n)")
  (strerror "char *strerror(int errnom)")
  (strlen "size_t strlen(const char *s)"))

;; We don't try to handle 7.22 <tgmath.h> for now as it has macros
;; that have the same names as the functions in <math.h>.

(define-inclue-header (c99 "time.h")
  "7.23. Date and time."
  ;; (NULL)
  (CLOCKS_PER_SEC)
  (clock_t)
  (time_t)
  (tm) ;; TODO how to handle 'struct' keyword?
  (clock "clock_t clock(void)")
  (difftime "double difftime(time_t time1, time_t time0)")
  (mktime "time_t mktime(struct tm *timeptr)")
  (time "time_t time(time_t *timer)")
  (asctime "char *asctime(const struct tm *timeptr)")
  (ctime "char *ctime(const time_t *timer)")
  (gmtime "struct tm *gmtime(const time_t *timer)")
  (localtime "struct tm *localtime(const time_t *timer)")
  (strftime "size_t strftime(char * restrict s, size_t maxsize, const char * restrict format, const struct tm * restrict timeptr)"))

(define-inclue-header (c99 "wchar.h")
  "7.24. Extended multibyt and wide character utilities."
  ;; (wchar_t)
  ;; (size_t)
  (mbstate_t)
  (wint_t)
  ;; (struct tm)
  ;; (NULL)
  (WEOF)
  (fwprintf "int fwprintf(FILE * restrict stream, const wchar_t * restrict format, ...)")
  (fwscanf "int fwscanf(FILE * restrict stream, const wchar_t * restrict format,  ...)")
  (swprintf "int swprintf(wchar_t * restrict s, size_t n, const wchar_t * restrict format, ...)")
  (swscanf "int swscanf(const wchar_t * restrict s, const wchar_t * restrict format, ...)")
  (vfwprintf "int vfwprintf(FILE * restrict stream, const wchar_t * restrict format, va_list arg)")
  (vfwscanf "int vfwscanf(FILE * restrict stream, const wchar_t * restrict format, va_list arg)")
  (vswprintf "int vwsprintf(wchar_t * restrict s, size_t n, const wchar_t * restrict format, va_list arg)")
  (vswscanf "int vswscanf(const wchar_t * restrict s, const wchar_t * restrict format, va_list arg)")
  (vwprintf "int vwprintf(const wchar_t * restrict format, va_list arg)")
  (vwscanf "int vwscanf(const wchar_t * restrict format, va_list arg)")
  (wprintf "int wprintf(const wchar_t * restrict format, ...)")
  (wscanf "int wscanf(const wchar_t * restrict format, ...)")
  (fgetwc "wint_t fgetwc(FILE *stream)")
  (fgetws "wchar_t *fgetws(wchar_t * restrict s, int n, FILE * restrict stream)")
  (fputwc "wint_t fputwc(wchar_t c, FILE *stream)")
  (fputws "int fputws(const wchar_t * restrict s, FILE * restrict stream)")
  (fwide "int fwide(FILE *stream, int mode)")
  (getwc "wint_t getwc(FILE *stream)")
  (getwchar "wint_t getwchar(void)")
  (putwc "wint_t putwc(wchar_t c, FILE *stream)")
  (putwchar "wint_t putwchar(wchar_t c)")
  (ungetwc "wint_t ungetwc(wint_t c, FILE *stream)")
  (wcstod "double wcstod(const wchar_t * restrict nptr, wchar_t ** restrict endptr)")
  (wcstof "float wcstof(const wchar_t * restrict nptr, wchar_t ** restrict endptr)")
  (wcstold "long double wcstold(const wchar_t * restrict nptr, wchar_t ** restrict endptr)")
  (wcstol "long int wcstol(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)")
  (wcstoll "long long int wcstoll(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)")
  (wcstoul "unsigned long int wcstoul(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)")
  (wcstoull "unsigned long long int wcstoull(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)")
  (wcscpy "wchar_t *wcscpy(wchar_t * restrict s1, const wchar_t * restrict s2)")
  (wcsncpy "wchar_t *wcsncpy(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)")
  (wmemcpy "wchar_t *wmemcpy(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)")
  (wmemmove "wchar_t *wmemmove(wchar_t *s1, const wchar_t *s2, size_t n)")
  (wcscat "wchar_t *wcscat(wchar_t * restrict s1, const wchar_t * restrict s2)")
  (wcsncat "wchar_t *wcsncat(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)")
  (wcscmp "int wcscmp(const wchar_t *s1, const wchar_t *s2)")
  (wcscoll "int wcscoll(const wchar_t *s1, const wchar_t *s2)")
  (wcsncmp "int wcsncmp(const wchar_t *s1, const wchar_t *s2, size_t n)")
  (wcsxfrm "size_t wcsxfrm(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)")
  (wmemcmp "int wmemcmp(const wchar_t *s1, const wchar_t *s2, size_t n)")
  (wcschr "wchar_t *wcschr(const wchar_t *s, wchar_t c)")
  (wcscspn "size_t wcscspn(const wchar_t *s1, const wchar_t *s2)")
  (wcspbrk "wchar_t *wcspbrk(const wchar_t *s1, const wchar_t *s2)")
  (wcsrchr "wchar_t *wcsrchr(const wchar_t *s, wchar_t c)")
  (wcsstr "wchar_t *wcsstr(const wchar_t *s1, const wchar_t *s2)")
  (wcstok "wchar_t *wcstok(wchar_t * restrict s1, const wchar_t * restrict s2, wchar_t ** restrict ptr)")
  (wmemchr "wchar_t *wmemchr(const wchar_t *s, wchar_t c, size_t n)")
  (wcslen "size_t wcslen(const wchar_t *s)")
  (wmemset "wchar_t *wmemset(wchar_t *s, wchar_t c, size_t n)")
  (wcsftime "size_t wcsftime(wchar_t * restrict s, size_t maxsize, const wchar_t * restrict format, const struct tm * restrict timeptr)")
  (btowc "wint_t btowc(int c)")
  (wctob "int wctob(wint_t c)")
  (mbsinit "int mbsinit(const mbstate_t *ps)")
  (mbrlen "size_t mbrlen(const char *restrict s, size_t n, mbstate_t * restrict ps)")
  (mbrtowc "size_t mbrtowc(wchar_t * restrict pwc, const char * restrict s, size_t n, mbstate_t * restrict ps)")
  (wcrtomb "size_t wcrtomb(char * restrict s, wchar_t wc, mbstate_t * restrict ps)")
  (mbsrtowcs "size_t mbsrtowcs(wchar_t * restrict dst, const char ** restrict src, size_t len, mbstate_t * restrict ps)")
  (wcsrtombs "size_t wcsrtombs(char * restrict dst, const wchar_t ** restrict src, size_t len, mbstate_t * restrict ps)"))

(define-inclue-header (c99 "wctype.h")
  "7.25. Wide character classification and mapping utilities."
  (wint_t)
  (wctrans_t)
  (wctype_t)
  ;; (WEOF)
  (iswalnum "int iswalnum(wint_t wc)")
  (iswalpha "int iswalpha(wint_t wc)")
  (iswblank "int iswblank(wint_t wc)")
  (iswcntrl "int iswcntrl(wint_t wc)")
  (iswdigit "int iswdigit(wint_t wc)")
  (iswgraph "int iswgraph(wint_t wc)")
  (iswlower "int iswlower(wint_t wc)")
  (iswprint "int iswprint(wint_t wc)")
  (iswpunct "int iswpunct(wint_t wc)")
  (iswspace "int iswspace(wint_t wc)")
  (iswupper "int iswupper(wint_t wc)")
  (iswxdigit "int iswxdigit(wint_t wc)")
  (iswctype "int iswctype(wint_t wc, wctype_t desc)")
  (wctype "wctype_t wctype(const char *property)")
  (towlower "wint_t towlower(wint_t wc)")
  (towupper "wint_t towupper(wint_t wc)")
  (towctrans "wint_t towctrans(wint_t wc, wctrans_t desc)")
  (wctrans "wctrans_t wctrans(const char *property)"))

(provide 'inclue-c99)

;;; inclue-c99.el ends here
